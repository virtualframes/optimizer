Metadata-Version: 2.4
Name: optimizer
Version: 0.1.0
Summary: Augmented optimizer for virtual node and game-engine authentication matrix simulation.
Author: Jules
License: MIT License
Project-URL: Homepage, https://github.com/virtualframes/optimizer
Project-URL: Issues, https://github.com/virtualframes/optimizer/issues
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: fastapi
Requires-Dist: uvicorn[standard]
Requires-Dist: pydantic
Requires-Dist: pyyaml
Requires-Dist: click
Requires-Dist: pytest
Requires-Dist: flake8
Requires-Dist: pybullet
Requires-Dist: networkx
Requires-Dist: pathspec>=0.12.1
Requires-Dist: requests>=2.32
Requires-Dist: beautifulsoup4>=4.12
Provides-Extra: atlas
Requires-Dist: PyYAML>=6.0.2; extra == "atlas"
Requires-Dist: pathspec>=0.12.1; extra == "atlas"
Requires-Dist: requests>=2.32; extra == "atlas"
Requires-Dist: beautifulsoup4>=4.12; extra == "atlas"
Provides-Extra: dev
Requires-Dist: httpx; extra == "dev"
Requires-Dist: temporalio; extra == "dev"
Requires-Dist: pytest-asyncio; extra == "dev"
Requires-Dist: openai; extra == "dev"
Requires-Dist: pymilvus; extra == "dev"
Provides-Extra: neo4j
Requires-Dist: neo4j; extra == "neo4j"
Provides-Extra: vm
Requires-Dist: psutil; extra == "vm"
Requires-Dist: paramiko; extra == "vm"
Requires-Dist: cryptography; extra == "vm"
Requires-Dist: pywinrm; extra == "vm"
Requires-Dist: fabric; extra == "vm"
Requires-Dist: docker; extra == "vm"
Requires-Dist: pywin32; sys_platform == "win32" and extra == "vm"
Dynamic: license-file

# Optimizer

Augmented optimizer for virtual node and game-engine authentication matrix simulation in a 3D spacetime physics environment.

This project provides a framework for simulating complex systems with a focus on:
- **Virtual Node Simulation**: Core `Node` class for representing virtual simulation nodes.
- **Physics Engine Integration**: An `Engine` adapter for PyBullet for 3D physics.
- **Authentication Matrix**: An `AuthMatrix` module for node-to-node credential checks.
- **REST API**: A FastAPI backend with `ingest` and `query` endpoints.
- **CLI**: A command-line interface for launching and configuring simulations.

## Getting Started

### Prerequisites
- Python 3.9+
- Docker (optional, for containerized deployment)
- Build tools (gcc, g++, make) - required for compiling Python packages like pybullet

### Checking System Dependencies
Before installing, you can check if all required build dependencies are available:
```bash
# Using the shell script
./scripts/install_dependencies.sh

# Or using Python
python -m optimizer.utils.build_helper
```

If any dependencies are missing, the script will provide installation commands for your system.

### Installation
1. Clone the repository:
   ```bash
   git clone https://github.com/your-username/optimizer.git
   cd optimizer
   ```
2. Check and install system dependencies (if needed):
   ```bash
   # Check what's missing
   ./scripts/install_dependencies.sh

   # Install on Ubuntu/Debian
   sudo apt-get update && sudo apt-get install -y build-essential

   # Or on Red Hat/CentOS
   sudo yum groupinstall -y 'Development Tools'
   ```
3. Install Python dependencies:
   ```bash
   pip install -r requirements.txt
   ```

### Running the Application
- **Via CLI**:
  ```bash
  optimizer --config-path config.yml
  ```
- **Via Docker**:
  ```bash
  docker-compose up --build
  ```

## Testing
To run the test suite:
```bash
pytest
```

## Build Dependencies

This project includes utilities to automatically detect missing build dependencies and suggest installation commands.

### Automated Dependency Checking
The build process automatically checks for required system dependencies (gcc, g++, make) and provides helpful error messages with installation instructions if any are missing.

### Using the Dependency Checker

**Shell Script:**
```bash
./scripts/install_dependencies.sh
```

**Python Module:**
```python
from optimizer.utils.build_helper import check_build_dependencies, DependencyChecker

# Simple check
if not check_build_dependencies():
    print("Some dependencies are missing")

# Detailed checking
checker = DependencyChecker()
all_present, message = checker.verify_and_suggest()
if not all_present:
    print(message)
```

### Analyzing Build Errors
The build helper can also analyze error output to detect missing dependencies:
```python
from optimizer.utils.build_helper import analyze_build_error

error_output = "error: command 'gcc' failed with exit status 1"
suggestion = analyze_build_error(error_output)
if suggestion:
    print(suggestion)
```

## CI/CD
This project uses GitHub Actions for continuous integration. The workflow runs `pytest` and `flake8` on every push and pull request.
